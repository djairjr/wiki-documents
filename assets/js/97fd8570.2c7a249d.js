"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[41568],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>g});var n=o(67294);function i(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){i(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,i=function(e,t){if(null==e)return{};var o,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(i[o]=e[o]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(o),u=i,g=d["".concat(c,".").concat(u)]||d[u]||m[u]||r;return o?n.createElement(g,a(a({ref:t},p),{},{components:o})):n.createElement(g,a({ref:t},p))}));function g(e,t){var o=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=o.length,a=new Array(r);a[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<r;l++)a[l]=o[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},98882:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var n=o(87462),i=(o(67294),o(3905));const r={description:"Using WiFi technology to enable geolocate tracker",title:"How to get location via Wi-Fi",keywords:["SenseCAP_T1000_tracker"],slug:"/Tracker_WiFi_Geolocation",last_update:{date:"10/19/2023",author:"JoJang"}},a="Using Wi-Fi technology to enable geolocation for your tracker",s={unversionedId:"Sensor/SenseCAP/SenseCAP_T1000_Tracker/User_Guide/Tracker_WiFi_Geolocation",id:"Sensor/SenseCAP/SenseCAP_T1000_Tracker/User_Guide/Tracker_WiFi_Geolocation",title:"How to get location via Wi-Fi",description:"Using WiFi technology to enable geolocate tracker",source:"@site/docs/Sensor/SenseCAP/SenseCAP_T1000_Tracker/User_Guide/Tracker_WiFi_Geolocation.md",sourceDirName:"Sensor/SenseCAP/SenseCAP_T1000_Tracker/User_Guide",slug:"/Tracker_WiFi_Geolocation",permalink:"/Tracker_WiFi_Geolocation",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/SenseCAP/SenseCAP_T1000_Tracker/User_Guide/Tracker_WiFi_Geolocation.md",tags:[],version:"current",lastUpdatedBy:"JoJang",lastUpdatedAt:1697673600,formattedLastUpdatedAt:"Oct 19, 2023",frontMatter:{description:"Using WiFi technology to enable geolocate tracker",title:"How to get location via Wi-Fi",keywords:["SenseCAP_T1000_tracker"],slug:"/Tracker_WiFi_Geolocation",last_update:{date:"10/19/2023",author:"JoJang"}},sidebar:"ProductSidebar",previous:{title:"Quick Started",permalink:"/Get_Started_with_SenseCAP_T1000_tracker"},next:{title:"How to get location via Bluetooth Beacon",permalink:"/bluetooth_beacon_for_SenseCAP_Traker"}},c={},l=[{value:"2.1 Google Geolocation",id:"21-google-geolocation",level:2},{value:"2.2 Baidu Map",id:"22-baidu-map",level:2}],p={toc:l},d="wrapper";function m(e){let{components:t,...o}=e;return(0,i.kt)(d,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"using-wi-fi-technology-to-enable-geolocation-for-your-tracker"},"Using Wi-Fi technology to enable geolocation for your tracker"),(0,i.kt)("h1",{id:"1-obtaining-wi-fi-information-from-the-things-network"},"1. Obtaining Wi-Fi information from The Things Network"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Step 1."),"  We establish the connection between the tracker and The Things Network (TTN) by following the step-by-step tutorial provided on Seeed Studio's ",(0,i.kt)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/SenseCAP_T1000_tracker_TTN/"},"Wiki"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Step 2."),"  Extracting the necessary MAC address, RSSI (Received Signal Strength Indication), and timestamp from the parsed payload, as these data will be utilized for Wi-Fi geolocation in subsequent steps. ")),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:1e3,src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/wifi_tacker1.jpg"})),(0,i.kt)("h1",{id:"2-making-location-requests-through-the-api-provided-by-a-location-service-provider"},"2. Making location requests through the API provided by a location service provider"),(0,i.kt)("p",null,"Recommended geolocation service providers\uff1a"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"1. Google Geolocation")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"2. Baidu Map")),(0,i.kt)("h2",{id:"21-google-geolocation"},"2.1 Google Geolocation"),(0,i.kt)("p",null,"To utilize Google Geolocation for obtaining location through Wi-Fi, we need to obtain access to the ",(0,i.kt)("a",{parentName:"p",href:"https://developers.google.com/maps/documentation/geolocation/overview?hl=en"},"Google Geolocation API"),".There are also various methods outlined above for utilizing the Geolocation API."),(0,i.kt)("p",null,"Once we obtain the API, we can send requests to Google to parse our WIFI information. Here, we use Python code to convert WIFI information into coordinate data."),(0,i.kt)("p",null,"Step 1. Install 'googlemaps' using the pip command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"pip install -U googlemaps\n")),(0,i.kt)("p",null,"Step 2. Using Python to send parsing requests, you need to fill in the API key you obtained in the ",(0,i.kt)("inlineCode",{parentName:"p"},"api_key")," variable in the code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import googlemaps\nfrom googlemaps import exceptions\n\nparam = {\n  "considerIp": "false",\n  "wifiAccessPoints": [\n    {\n      "macAddress": "9A:BB:99:12:1B:61",\n      "signalStrength": -50,\n      "signalToNoiseRatio": 0\n    },\n    {\n      "macAddress": "14:DE:39:A6:20:C9",\n      "signalStrength": -46,\n      "signalToNoiseRatio": 0\n    },\n    {\n      "macAddress": "C8:D7:19:92:69:6E",\n      "signalStrength": -85,\n      "signalToNoiseRatio": 0\n    }\n  ]\n}\n\n\n_GEOLOCATION_BASE_URL = "https://www.googleapis.com"\n\n\ndef _geolocation_extract(response):\n    """\n    Mimics the exception handling logic in ``client._get_body``, but\n    for geolocation which uses a different response format.\n    """\n    body = response.json()\n    if response.status_code in (200, 404):\n        return body\n\n    try:\n        error = body["error"]["errors"][0]["reason"]\n    except KeyError:\n        error = None\n\n    if response.status_code == 403:\n        raise exceptions._OverQueryLimit(response.status_code, error)\n    else:\n        raise exceptions.ApiError(response.status_code, error)\n\n\ndef geolocate(client, home_mobile_country_code=None,\n              home_mobile_network_code=None, radio_type=None, carrier=None,\n              consider_ip=None, cell_towers=None, wifi_access_points=None):\n    """\n    The Google Maps Geolocation API returns a location and accuracy\n    radius based on information about cell towers and WiFi nodes given.\n\n    See https://developers.google.com/maps/documentation/geolocation/intro\n    for more info, including more detail for each parameter below.\n\n    :param home_mobile_country_code: The mobile country code (MCC) for\n        the device\'s home network.\n    :type home_mobile_country_code: string\n\n    :param home_mobile_network_code: The mobile network code (MCC) for\n        the device\'s home network.\n    :type home_mobile_network_code: string\n\n    :param radio_type: The mobile radio type. Supported values are\n        lte, gsm, cdma, and wcdma. While this field is optional, it\n        should be included if a value is available, for more accurate\n        results.\n    :type radio_type: string\n\n    :param carrier: The carrier name.\n    :type carrier: string\n\n    :param consider_ip: Specifies whether to fall back to IP geolocation\n        if wifi and cell tower signals are not available. Note that the\n        IP address in the request header may not be the IP of the device.\n    :type consider_ip: bool\n\n    :param cell_towers: A list of cell tower dicts. See\n        https://developers.google.com/maps/documentation/geolocation/intro#cell_tower_object\n        for more detail.\n    :type cell_towers: list of dicts\n\n    :param wifi_access_points: A list of WiFi access point dicts. See\n        https://developers.google.com/maps/documentation/geolocation/intro#wifi_access_point_object\n        for more detail.\n    :type wifi_access_points: list of dicts\n    """\n\n    params = {}\n    if home_mobile_country_code is not None:\n        params["homeMobileCountryCode"] = home_mobile_country_code\n    if home_mobile_network_code is not None:\n        params["homeMobileNetworkCode"] = home_mobile_network_code\n    if radio_type is not None:\n        params["radioType"] = radio_type\n    if carrier is not None:\n        params["carrier"] = carrier\n    if consider_ip is not None:\n        params["considerIp"] = consider_ip\n    if cell_towers is not None:\n        params["cellTowers"] = cell_towers\n    if wifi_access_points is not None:\n        params["wifiAccessPoints"] = wifi_access_points\n\n    return client._request("/geolocation/v1/geolocate", {},  # No GET params\n                           base_url=_GEOLOCATION_BASE_URL,\n                           extract_body=_geolocation_extract,\n                           post_json=params)\n\n\n\n\nif __name__ == \'__main__\':\n    # Replace with your API key\n    api_key = \'YOUR_API_KEY\'\n\n    # Create a Google Maps client\n    gmaps = googlemaps.Client(key=api_key)\n\n    # Call the geolocate function\n    result = geolocate(\n        gmaps,\n        wifi_access_points=param["wifiAccessPoints"],\n        consider_ip=param["considerIp"]\n    )\n\n    # Print the result\n    print(result)\n\n')),(0,i.kt)("p",null,"Step 3. After completing the above steps, you will be able to obtain the Tracker's location information!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{'location': {'lat': 22.5769055, 'lng': 113.9222236}, 'accuracy': 20}\n")),(0,i.kt)("p",null,"If you don't have running conditions, you can easily run the ",(0,i.kt)("a",{parentName:"p",href:"https://colab.research.google.com/drive/10iTGJ_W87b8e45d6DmohuRzMYevkWCmI?usp=sharing"},"Colab notebook")," we created !"),(0,i.kt)("h2",{id:"22-baidu-map"},"2.2 Baidu Map"),(0,i.kt)("p",null,"In this tutorial, we have chosen to use the intelligent hardware positioning service provided by the ",(0,i.kt)("strong",{parentName:"p"},"Baidu Map")," Open Platform to perform location analysis on the Wi-Fi information we have obtained. The access methods may vary for different location service providers, and here we are using IP whitelist authentication. The specific access process involves defining the data package we need to parse and then making a POST request to the API service address. Below is the JSON data package we have defined."),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:1e3,src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/wifi_tracker2.jpg"})),(0,i.kt)("p",null,"Next, we navigate to the directory where the JSON file is located, open the terminal, and enter the request command\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-post"},'curl -X POST -H "Content-Type: application/json" -d @request.json https://api.map.baidu.com/locapi/v2\n')),(0,i.kt)("p",null,"Then we can receive the parsed data that is returned\uff1a"),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:1e3,src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/wifi_tracker3.jpg"})),(0,i.kt)("h1",{id:"3-displaying-the-location-on-a-map"},"3. Displaying the location on a map"),(0,i.kt)("p",null,"The final step is to input the parsed coordinates into the map to display the location. Here, we are using the Google Maps link: ",(0,i.kt)("a",{parentName:"p",href:"https://www.google.com/maps/"},"https://www.google.com/maps/")),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:1e3,src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/wifi_tracker4.png"})),"You can enter the parsed coordinates in the map's search bar to view the specific location on the map.")}m.isMDXComponent=!0}}]);