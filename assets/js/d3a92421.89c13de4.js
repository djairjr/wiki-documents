"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[16395],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),o=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=o(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,u=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=o(a),p=r,g=c["".concat(u,".").concat(p)]||c[p]||d[p]||s;return a?n.createElement(g,i(i({ref:t},m),{},{components:a})):n.createElement(g,i({ref:t},m))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var o=2;o<s;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},40045:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var n=a(87462),r=(a(67294),a(3905));const s={description:"Connect SenseCAP T1000 Tracker to AWS",title:"SenseCAP T1000 Tracker & AWS",keywords:["Tracker","AWS"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/SenseCAP_T1000_Tracker_AWS",last_update:{date:"8/24/2023",author:"Jessie"}},i="Create the AWS Account",l={unversionedId:"Sensor/SenseCAP/SenseCAP_T1000_Tracker/AWS_Service",id:"Sensor/SenseCAP/SenseCAP_T1000_Tracker/AWS_Service",title:"SenseCAP T1000 Tracker & AWS",description:"Connect SenseCAP T1000 Tracker to AWS",source:"@site/docs/Sensor/SenseCAP/SenseCAP_T1000_Tracker/AWS_Service.md",sourceDirName:"Sensor/SenseCAP/SenseCAP_T1000_Tracker",slug:"/SenseCAP_T1000_Tracker_AWS",permalink:"/SenseCAP_T1000_Tracker_AWS",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/SenseCAP/SenseCAP_T1000_Tracker/AWS_Service.md",tags:[],version:"current",lastUpdatedBy:"Jessie",lastUpdatedAt:1692835200,formattedLastUpdatedAt:"Aug 24, 2023",frontMatter:{description:"Connect SenseCAP T1000 Tracker to AWS",title:"SenseCAP T1000 Tracker & AWS",keywords:["Tracker","AWS"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/SenseCAP_T1000_Tracker_AWS",last_update:{date:"8/24/2023",author:"Jessie"}}},u={},o=[{value:"Add Gateway",id:"add-gateway",level:3},{value:"Add Devices",id:"add-devices",level:3},{value:"Decode the Tracker data",id:"decode-the-tracker-data",level:3},{value:"Create Message Rules",id:"create-message-rules",level:4},{value:"Attachments:",id:"attachments",level:4}],m={toc:o};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-the-aws-account"},"Create the AWS Account"),(0,r.kt)("p",null,"Go to ",(0,r.kt)("a",{parentName:"p",href:"https://signin.aws.amazon.com/"},"https://signin.aws.amazon.com/")," to create an AWS account. "),(0,r.kt)("p",null,"This will need your email, name, credit card info."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9248071e-0111-4bf4-b800-9df3991abe01/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"after the registration,  you are ready to go to AWS IoT in the console. "),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e9e5f743-d553-4199-abde-8648b2615e24/Untitled.png",alt:"Untitled"})),(0,r.kt)("h3",{id:"add-gateway"},"Add Gateway"),(0,r.kt)("p",null,"On the left menu,select LPWAN devices \u2192 Gateways"),(0,r.kt)("p",null,"you can use the SenseCAP M2 gateway"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/SenseCAP-Multi-Platform-LoRaWAN-Indoor-Gateway-SX1302-US915-p-5472.html"},"SenseCAP M2 Multi-Platform LoRaWAN Indoor Gateway(SX1302)\xa0-\xa0US915")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b98ad083-a3ac-4c34-8356-d021bae0a1c5/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"click add Gateway"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/29520da8-c666-4173-a59b-961c9539eb19/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"Input the Gateway EUI which you can get it in the Gateway admin console"),(0,r.kt)("p",null,"set the frequency plan, US915 for United States and set the sub band as 2"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/00041846-86bd-4063-9fd8-ed891c2f088e/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"next, create the certificate, which will be need in the gateway configuration. with this cerificate, the SenseCAP M2 can connect to AWS IoT Core LoRaWAN."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/429f35e8-088f-49c5-a576-0f22ccbd0d5e/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"download and save the certificate files and the server trust certificates."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6b3a2e18-41d6-4362-b102-86db1e9d254d/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"unzip it, there are four files inside."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3274ce4b-9b9d-4cb0-aee5-2aea4cb44935/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"next create a role fro the gateway."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b356b9c5-2ce3-438d-8e17-fdd0c3396441/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b4ea4591-b8b9-40e9-b155-7e5f4f673a73/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"copy the CUPs url, this is important, which tells the gateway where the data should be sent to."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6d793332-e63d-4c8e-b620-6a01f43f2894/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"config the SenseCAP M2 with the right selection, and certificate from those downloaded files."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/851dc68d-e323-4e8d-99ab-fe203812b7d3/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"now, you will see the Gateway connected with AWS"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/93504adb-97f8-4db0-98bf-ef5e010a0bbd/Untitled.png",alt:"Untitled"})),(0,r.kt)("h3",{id:"add-devices"},"Add Devices"),(0,r.kt)("p",null,"add SenseCAP Tracker to AWS IoT Core"),(0,r.kt)("p",null,"first, you need to add device profile"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b1ff0dc7-bfef-4323-af43-255a9e27ab03/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d2d236d4-e541-461a-91a9-07983f863284/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"and create the device service profile"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fa2c3d24-70d5-4d8d-a0f3-fdb972a17786/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/69351329-9690-4adb-b94f-948166945c52/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"then add  desination, which will tell where the data should go."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ed06b7b1-67c5-4e7a-a5b5-b04322bd6dbb/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/60238551-9588-4054-9edc-8fd92a34da35/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"next, add the detail SenseCAP Tracker T1000"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/70e3d36f-930e-4c2e-bfbc-53064ac9e52d/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"read out the device EUI , Appkey, and AppEUI from the SenseCAP T1000 from the SenseCAP Mate App"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e454e5ad-cd48-4f8b-bc65-32f8007b8cb9/Untitled.jpeg",alt:"Untitled"})),(0,r.kt)("p",null,"and paste it in the AWS"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/54f8d35e-1905-4dcb-8bf5-2b9d66735810/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"select the device profile just created"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c158cdfb-6058-4518-b330-0513378ecf25/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"and select the destination just configured"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0364f6c4-6519-426b-8b2b-4678f6de05fe/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"untill now, the device has been added to AWS IoT Core."),(0,r.kt)("h3",{id:"decode-the-tracker-data"},"Decode the Tracker data"),(0,r.kt)("p",null,"The SenseCAP Tracker will uplink the payload via LoRaWAN network\uff0cand the payload is under specified format to save the bandwith, so it is hard to read."),(0,r.kt)("p",null,"So we need to decode it, and save the data somewhere in AWS."),(0,r.kt)("p",null,"we need to create a rules for the Tracker."),(0,r.kt)("p",null,"For prepare, you need to record the \u201c",(0,r.kt)("inlineCode",{parentName:"p"},"Endpoint"),'" first, go to AWS IoT core home page, and click \u201cSettings\u201d'),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/23678ace-8bb4-48f6-b84c-24cb976fbc20/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"Record the \u201c",(0,r.kt)("inlineCode",{parentName:"p"},"Endpoint"),"\u201d address in the page, you will need to use it in the next step."),(0,r.kt)("p",null,"For example, what I've shown here is ",(0,r.kt)("a",{parentName:"p",href:"http://a39w0g3w5os1ti-ats.iot.us-east-1.amazonaws.com/"},"a39w0g3w5os1ti-ats.iot.us-east-1.amazonaws.com"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/664799ad-43a6-43b0-b0af-b2f0fcc8216f/Untitled.png",alt:"Untitled"})),(0,r.kt)("h4",{id:"create-message-rules"},"Create Message Rules"),(0,r.kt)("p",null,"Click Message routing \u2192 Rules, and click \u201cCreate Rule\u201d button."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/477b92b6-5ada-456c-8284-c2feb3d0bbc1/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"Input a rule name(\u201c",(0,r.kt)("inlineCode",{parentName:"p"},"sensecap_lorawan_rule"),"\u201d for example), and then click \u201cNext\u201d."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/08834105-8318-4110-b6da-d2bf6aaf5065/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"Select \u201c",(0,r.kt)("inlineCode",{parentName:"p"},"2016-03-23"),"\u201d from SQL version, and input the following content, as the contents of \u201cSQL statement\u201d:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SELECT * FROM \u201clorawan-device\u201d")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0a88583d-c368-4b93-bc7d-512c23904b56/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"Same page, scroll down to \u201cRule actions\u201d section, and select \u201c",(0,r.kt)("inlineCode",{parentName:"p"},"Lambda"),"\u201d from \u201cAction 1\u201d."),(0,r.kt)("p",null,"Next is an empty drop-down menu for the \u201cLambda function\u201d, we need to create a function first, click \u201cCreate a Lambda function\u201d and jump to another page."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4714ff51-1732-48ec-874f-154002d830fe/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"Refer to the screenshot below, input \u201cFunction name\u201d and select the correct \u201cRuntime\u201d, and then, click \u201cCreate function\u201d button to create a new function."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/74aa467c-5cea-48be-9ac5-0197bd3b61f3/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"On the following funcition config page, remove all the code and replace it with the script attached at the end of the guide, then click \u201cDeploy\u201d button."),(0,r.kt)("p",null,"In the third line of the script, you need to replace the address in single quotes with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Endpoint")," address you recorded earlier."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/41be0130-5810-4258-acfe-48f1d394e7ca/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"Click \u201cConfiguration\u201d \u2192 \u201cPermissions\u201d \u2192 \u201cEdit\u201d"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/48bd5034-9a5d-4816-beaf-52cce8fef264/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,'Click "View the xxxxxxxxxxx role" at the bottom.'),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/504cb812-54ea-42b1-9e78-5840d5931f63/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"Click \u201cAdd permissions\u201d \u2192 \u201cAttach policies\u201d."),(0,r.kt)("p",null,"Search \u201c",(0,r.kt)("a",{parentName:"p",href:"https://us-east-1.console.aws.amazon.com/iamv2/home#/policies/details/arn%3Aaws%3Aiam%3A%3Aaws%3Apolicy%2FAdministratorAccess"},"AdministratorAccess"),"\u201d, check the box left it, and then click \u201cAdd Permissions\u201d."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9d36e37b-f0ef-4f9c-99ba-7150403b42c5/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"Go back to \u201cCreate rule\u201d page, click refresh button and select the lambda function you created."),(0,r.kt)("p",null,"Then, click \u201cCreate\u201d and complete the rule creation."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/302ae5ad-8c74-40f3-9961-64c791d5d568/Untitled.png",alt:"Untitled"})),(0,r.kt)("p",null,"Watch the data on page \u201cMQTT test client\u201d, input ",(0,r.kt)("inlineCode",{parentName:"p"},"#")," and click \u201cSubscribe\u201d button, you will see the tracker\u2019s data."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/be29c5b2-8ba1-4037-8dca-64874f9492a1/Untitled.png",alt:"Untitled"})),(0,r.kt)("h4",{id:"attachments"},"Attachments:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Lambda Function Script"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const AWS = require('aws-sdk');\n    const iotdata = new AWS.IotData({\n        endpoint: 'a39w0g3w5os1ti-ats.iot.us-east-1.amazonaws.com'\n    });\n    \n    function decodeUplink (input) {\n        // var bytes = input['bytes']\n        var bytes = Buffer.from(input, 'base64');\n        var bytesString = bytes2HexString(bytes).toLocaleUpperCase()\n        var decoded = {\n            valid: true,\n            err: 0,\n            payload: bytesString,\n            messages: []\n        }\n        let measurement = messageAnalyzed(bytesString)\n        decoded.messages = measurement\n        return { data: decoded }\n    }\n    \n    function messageAnalyzed (messageValue) {\n        try {\n            let frames = unpack(messageValue)\n            let measurementResultArray = []\n            for (let i = 0; i < frames.length; i++) {\n                let item = frames[i]\n                let dataId = item.dataId\n                let dataValue = item.dataValue\n                let measurementArray = deserialize(dataId, dataValue)\n                measurementResultArray.push(measurementArray)\n            }\n            return measurementResultArray\n        } catch (e) {\n            return e.toString()\n        }\n    }\n    \n    function unpack (messageValue) {\n        let frameArray = []\n    \n        for (let i = 0; i < messageValue.length; i++) {\n            let remainMessage = messageValue\n            let dataId = remainMessage.substring(0, 2).toUpperCase()\n            let dataValue\n            let dataObj = {}\n            let packageLen\n            switch (dataId) {\n                case '01':\n                    packageLen = 94\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '02':\n                    packageLen = 32\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '03':\n                    packageLen = 64\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    break\n                case '04':\n                    packageLen = 20\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '05':\n                    packageLen = 10\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '06':\n                    packageLen = 44\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '07':\n                    packageLen = 84\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '08':\n                    packageLen = 70\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '09':\n                    packageLen = 36\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '0A':\n                    packageLen = 76\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '0B':\n                    packageLen = 62\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '0C':\n                    packageLen = 2\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    break\n                case '0D':\n                    packageLen = 10\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                default:\n                    return frameArray\n            }\n            if (dataValue.length < 2) {\n                break\n            }\n            frameArray.push(dataObj)\n        }\n        return frameArray\n    }\n    \n    function deserialize (dataId, dataValue) {\n        let measurementArray = []\n        let eventList = []\n        let collectTime = 0\n        switch (dataId) {\n            case '01':\n                measurementArray = getUpShortInfo(dataValue)\n                break\n            case '02':\n                measurementArray = getUpShortInfo(dataValue)\n                break\n            case '03':\n                break\n            case '04':\n                measurementArray = [\n                    {measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(dataValue.substring(0, 2))},\n                    {measurementId: '3942', type: 'Heartbeat Interval', measurementValue: getOneWeekInterval(dataValue.substring(4, 8))},\n                    {measurementId: '3943', type: 'Periodic Interval', measurementValue: getOneWeekInterval(dataValue.substring(8, 12))},\n                    {measurementId: '3944', type: 'Event Interval', measurementValue: getOneWeekInterval(dataValue.substring(12, 16))},\n                    {measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(dataValue.substring(16, 18))}\n                ]\n                break;\n            case '05':\n                measurementArray = [\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(0, 2))},\n                    {measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(dataValue.substring(2, 4))},\n                    {measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(dataValue.substring(6, 8))}\n                ]\n                break\n            case '06':\n                eventList = getEventStatus(dataValue.substring(0, 6))\n                collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n                measurementArray = [\n                    {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                    {measurementId: '4197', type: 'Longitude', measurementValue: getSensorValue(dataValue.substring(16, 24), 1000000)},\n                    {measurementId: '4198', type: 'Latitude', measurementValue: getSensorValue(dataValue.substring(24, 32), 1000000)},\n                    {measurementId: '4097', type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(32, 36), 10)},\n                    {measurementId: '4199', type: 'Light', measurementValue: getSensorValue(dataValue.substring(36, 40))},\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(40, 42))},\n                    {type: 'Timestamp', measurementValue: collectTime}\n                ]\n                break\n            case '07':\n                eventList = getEventStatus(dataValue.substring(0, 6))\n                collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n                measurementArray = [\n                    {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                    {measurementId: '5001', type: 'Wi-Fi Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))},\n                    {measurementId: '4097', type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(72, 76), 10)},\n                    {measurementId: '4199', type: 'Light', measurementValue: getSensorValue(dataValue.substring(76, 80))},\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(80, 82))},\n                    {type: 'Timestamp', measurementValue: collectTime}\n                ]\n                break\n            case '08':\n                eventList = getEventStatus(dataValue.substring(0, 6))\n                collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n                measurementArray = [\n                    {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                    {measurementId: '5002', type: 'BLE Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))},\n                    {measurementId: '4097', type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(58, 62), 10)},\n                    {measurementId: '4199', type: 'Light', measurementValue: getSensorValue(dataValue.substring(62, 66))},\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(66, 68))},\n                    {type: 'Timestamp', measurementValue: collectTime}\n                ]\n                break\n            case '09':\n                eventList = getEventStatus(dataValue.substring(0, 6))\n                collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n                measurementArray = [\n                    {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                    {measurementId: '4197', type: 'Longitude', measurementValue: getSensorValue(dataValue.substring(16, 24), 1000000)},\n                    {measurementId: '4198', type: 'Latitude', measurementValue: getSensorValue(dataValue.substring(24, 32), 1000000)},\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(32, 34))},\n                    {type: 'Timestamp', measurementValue: collectTime}\n                ]\n                break\n            case '0A':\n                eventList = getEventStatus(dataValue.substring(0, 6))\n                collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n                measurementArray = [\n                    {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                    {measurementId: '5001', type: 'Wi-Fi Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))},\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(72, 74))},\n                    {type: 'Timestamp', measurementValue: collectTime}\n                ]\n                break\n            case '0B':\n                eventList = getEventStatus(dataValue.substring(0, 6))\n                collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n                measurementArray = [\n                    {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                    {measurementId: '5002', type: 'BLE Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))},\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(58, 60))},\n                    {type: 'Timestamp', measurementValue: collectTime}\n                ]\n                break\n            case '0D':\n                let errorCode = getInt(dataValue)\n                let error = ''\n                switch (errorCode) {\n                    case 0:\n                        error = 'THE GNSS SCAN TIME OUT'\n                        break\n                    case 1:\n                        error = 'THE WI-FI SCAN TIME OUT'\n                        break\n                    case 2:\n                        error = 'THE WI-FI+GNSS SCAN TIME OUT'\n                        break\n                    case 3:\n                        error = 'THE GNSS+WI-FI SCAN TIME OUT'\n                        break\n                    case 4:\n                        error = 'THE BEACON SCAN TIME OUT'\n                        break\n                    case 5:\n                        error = 'THE BEACON+WI-FI SCAN TIME OUT'\n                        break\n                    case 6:\n                        error = 'THE BEACON+GNSS SCAN TIME OUT'\n                        break\n                    case 7:\n                        error = 'THE BEACON+WI-FI+GNSS SCAN TIME OUT'\n                        break\n                    case 8:\n                        error = 'FAILED TO OBTAIN THE UTC TIMESTAMP'\n                        break\n                }\n                measurementArray.push({errorCode, error})\n        }\n        return measurementArray\n    }\n    \n    function getUpShortInfo (messageValue) {\n        return [\n            {\n                measurementId: '3000', type: 'Battery', measurementValue: getBattery(messageValue.substring(0, 2))\n            }, {\n                measurementId: '3502', type: 'Firmware Version', measurementValue: getSoftVersion(messageValue.substring(2, 6))\n            }, {\n                measurementId: '3001', type: 'Hardware Version', measurementValue: getHardVersion(messageValue.substring(6, 10))\n            }, {\n                measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(messageValue.substring(10, 12))\n            }, {\n                measurementId: '3942', type: 'Heartbeat Interval', measurementValue: getOneWeekInterval(messageValue.substring(14, 18))\n            }, {\n                measurementId: '3943', type: 'Periodic Interval', measurementValue: getOneWeekInterval(messageValue.substring(18, 22))\n            }, {\n                measurementId: '3944', type: 'Event Interval', measurementValue: getOneWeekInterval(messageValue.substring(22, 26))\n            }, {\n                measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(messageValue.substring(28, 30))\n            }\n        ]\n    }\n    function getBattery (batteryStr) {\n        return loraWANV2DataFormat(batteryStr)\n    }\n    function getSoftVersion (softVersion) {\n        return `${loraWANV2DataFormat(softVersion.substring(0, 2))}.${loraWANV2DataFormat(softVersion.substring(2, 4))}`\n    }\n    function getHardVersion (hardVersion) {\n        return `${loraWANV2DataFormat(hardVersion.substring(0, 2))}.${loraWANV2DataFormat(hardVersion.substring(2, 4))}`\n    }\n    \n    function getOneWeekInterval (str) {\n        return loraWANV2DataFormat(str) * 60\n    }\n    function getSensorValue (str, dig) {\n        if (str === '8000') {\n            return null\n        } else {\n            return loraWANV2DataFormat(str, dig)\n        }\n    }\n    \n    function bytes2HexString (arrBytes) {\n        var str = ''\n        for (var i = 0; i < arrBytes.length; i++) {\n            var tmp\n            var num = arrBytes[i]\n            if (num < 0) {\n                tmp = (255 + num + 1).toString(16)\n            } else {\n                tmp = num.toString(16)\n            }\n            if (tmp.length === 1) {\n                tmp = '0' + tmp\n            }\n            str += tmp\n        }\n        return str\n    }\n    function loraWANV2DataFormat (str, divisor = 1) {\n        let strReverse = bigEndianTransform(str)\n        let str2 = toBinary(strReverse)\n        if (str2.substring(0, 1) === '1') {\n            let arr = str2.split('')\n            let reverseArr = arr.map((item) => {\n                if (parseInt(item) === 1) {\n                    return 0\n                } else {\n                    return 1\n                }\n            })\n            str2 = parseInt(reverseArr.join(''), 2) + 1\n            return '-' + str2 / divisor\n        }\n        return parseInt(str2, 2) / divisor\n    }\n    \n    function bigEndianTransform (data) {\n        let dataArray = []\n        for (let i = 0; i < data.length; i += 2) {\n            dataArray.push(data.substring(i, i + 2))\n        }\n        return dataArray\n    }\n    \n    function toBinary (arr) {\n        let binaryData = arr.map((item) => {\n            let data = parseInt(item, 16)\n                .toString(2)\n            let dataLength = data.length\n            if (data.length !== 8) {\n                for (let i = 0; i < 8 - dataLength; i++) {\n                    data = `0` + data\n                }\n            }\n            return data\n        })\n        return binaryData.toString().replace(/,/g, '')\n    }\n    \n    function getSOSMode (str) {\n        return loraWANV2DataFormat(str)\n    }\n    \n    function getMacAndRssiObj (pair) {\n        let pairs = []\n        if (pair.length % 14 === 0) {\n            for (let i = 0; i < pair.length; i += 14) {\n                let mac = getMacAddress(pair.substring(i, i + 12))\n                if (mac) {\n                    let rssi = getInt8RSSI(pair.substring(i + 12, i + 14))\n                    pairs.push({mac: mac, rssi: rssi})\n                } else {\n                    continue\n                }\n            }\n        }\n        return pairs\n    }\n    \n    function getMacAddress (str) {\n        if (str.toLowerCase() === 'ffffffffffff') {\n            return null\n        }\n        let macArr = []\n        for (let i = 1; i < str.length; i++) {\n            if (i % 2 === 1) {\n                macArr.push(str.substring(i - 1, i + 1))\n            }\n        }\n        let mac = ''\n        for (let i = 0; i < macArr.length; i++) {\n            mac = mac + macArr[i]\n            if (i < macArr.length - 1) {\n                mac = mac + ':'\n            }\n        }\n        return mac\n    }\n    \n    function getInt8RSSI (str) {\n        return loraWANV2DataFormat(str)\n    }\n    \n    function getInt (str) {\n        return parseInt(str)\n    }\n    \n    /**\n     *  1.MOVING_STARTING\n     *  2.MOVING_END\n     *  3.DEVICE_STATIC\n     *  4.SHOCK_EVENT\n     *  5.TEMP_EVENT\n     *  6.LIGHTING_EVENT\n     *  7.SOS_EVENT\n     *  8.CUSTOMER_EVENT\n     * */\n    function getEventStatus (str) {\n        let bitStr = getByteArray(str)\n        let event = []\n        for (let i = bitStr.length; i >= 0; i--) {\n            if (i === 0) {\n                event[i] = bitStr.substring(0)\n            } else {\n                event[i] = bitStr.substring(i - 1, i)\n            }\n        }\n        return event.reverse()\n    }\n    \n    function getByteArray (str) {\n        let bytes = []\n        for (let i = 0; i < str.length; i += 2) {\n            bytes.push(str.substring(i, i + 2))\n        }\n        return toBinary(bytes)\n    }\n    \n    function getWorkingMode (workingMode) {\n        return getInt(workingMode)\n    }\n    \n    function getUTCTimestamp(str){\n        return parseInt(loraWANV2PositiveDataFormat(str)) * 1000\n    }\n    \n    function loraWANV2PositiveDataFormat (str, divisor = 1) {\n        let strReverse = bigEndianTransform(str)\n        let str2 = toBinary(strReverse)\n        return parseInt(str2, 2) / divisor\n    }\n    \n    exports.handler = async (event) => {\n      try {\n        const lorawan_info = event[\"WirelessMetadata\"][\"LoRaWAN\"];\n        const lorawan_data = event[\"PayloadData\"];\n    \n        const params = {\n          topic: 'sensecap/t1000',\n          payload: JSON.stringify({\n            eui: lorawan_info[\"DevEui\"],\n            timestamp:  lorawan_info[\"Timestamp\"],\n            data: decodeUplink(lorawan_data)[\"data\"]\n          }),\n          qos: 0\n        };\n    \n        await iotdata.publish(params).promise();\n    \n        return {\n          statusCode: 200,\n          body: 'Message published successfully'+JSON.stringify(event)\n        };\n      } catch (error) {\n        console.error('Error publishing message:', error);\n    \n        return {\n          statusCode: 500,\n          body: 'Error publishing message'\n        };\n      }\n    };    \n"))))}c.isMDXComponent=!0}}]);