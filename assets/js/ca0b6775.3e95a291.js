"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4633],{3905:(e,t,o)=>{o.d(t,{Zo:()=>d,kt:()=>h});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(o),m=n,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return o?r.createElement(h,a(a({ref:t},d),{},{components:o})):r.createElement(h,a({ref:t},d))}));function h(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:n,a[1]=s;for(var c=2;c<i;c++)a[c]=o[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},75249:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=o(87462),n=(o(67294),o(3905));const i={description:"MicroPython for Arduino-supported Boards",title:"MicroPython for Arduino-supported Boards",keywords:["Sorftware"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/Compiling_MicroPython_for_embedded_devices",last_update:{date:"1/16/2023",author:"jianjing Huang"}},a="Compiling MicroPython for embedded devices",s={unversionedId:"Top_Brand/Arduino/Tutorials/Compiling_Platform/Compiling_MicroPython_for_embedded_devices",id:"Top_Brand/Arduino/Tutorials/Compiling_Platform/Compiling_MicroPython_for_embedded_devices",title:"MicroPython for Arduino-supported Boards",description:"MicroPython for Arduino-supported Boards",source:"@site/docs/Top_Brand/Arduino/Tutorials/Compiling_Platform/Compiling_MicroPython_for_embedded_devices.md",sourceDirName:"Top_Brand/Arduino/Tutorials/Compiling_Platform",slug:"/Compiling_MicroPython_for_embedded_devices",permalink:"/Compiling_MicroPython_for_embedded_devices",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Top_Brand/Arduino/Tutorials/Compiling_Platform/Compiling_MicroPython_for_embedded_devices.md",tags:[],version:"current",lastUpdatedBy:"jianjing Huang",lastUpdatedAt:1673827200,formattedLastUpdatedAt:"Jan 16, 2023",frontMatter:{description:"MicroPython for Arduino-supported Boards",title:"MicroPython for Arduino-supported Boards",keywords:["Sorftware"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/Compiling_MicroPython_for_embedded_devices",last_update:{date:"1/16/2023",author:"jianjing Huang"}},sidebar:"ProductSidebar",previous:{title:"Project Eight - Thermostat",permalink:"/Project_Eight-Thermostat"},next:{title:"PlatformIO for Arduino-supported Boards",permalink:"/Software-PlatformIO"}},l={},c=[{value:"What is MicroPython",id:"what-is-micropython",level:2},{value:"How to build firmware (Let&#39;s use Xiao SAMD as an example)",id:"how-to-build-firmware-lets-use-xiao-samd-as-an-example",level:2},{value:"First: Prepare the relevant software",id:"first-prepare-the-relevant-software",level:3},{value:"Second: Switching workspaces Cloning source code",id:"second-switching-workspaces-cloning-source-code",level:3},{value:"Third: Build the mpy-cross  , MicroPython cross-compiler",id:"third-build-the-mpy-cross---micropython-cross-compiler",level:3},{value:"Next : Build external dependencies",id:"next--build-external-dependencies",level:3},{value:"Finally :Burning firmware",id:"finally-burning-firmware",level:3},{value:"Test our firmware",id:"test-our-firmware",level:2},{value:"Tech Support &amp; Product Discussion",id:"tech-support--product-discussion",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...o}=e;return(0,n.kt)(p,(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"compiling-micropython-for-embedded-devices"},"Compiling MicroPython for embedded devices"),(0,n.kt)("h2",{id:"what-is-micropython"},"What is MicroPython"),(0,n.kt)("p",null,"MicroPython is a software implementation of a programming language largely compatible with Python 3, written in C, that is optimized to run on a microcontroller."),(0,n.kt)("p",null,"MicroPython consists of a Python compiler to bytecode and a runtime interpreter of that bytecode. The user is presented with an interactive prompt (the REPL) to execute supported commands immediately. Included are a selection of core Python libraries; MicroPython includes modules which give the programmer access to low-level hardware."),(0,n.kt)("h2",{id:"how-to-build-firmware-lets-use-xiao-samd-as-an-example"},"How to build firmware (Let's use Xiao SAMD as an example)"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Seeeduino-XIAO-Arduino-Microcontroller-SAMD21-Cortex-M0+-p-4426.html"},"Seeeduino XIAO SAMD")," already supports micropython development."),(0,n.kt)("h3",{id:"first-prepare-the-relevant-software"},"First: Prepare the relevant software"),(0,n.kt)("p",null,'"arm-none-linux-gnueabi" is the toolchain that can be installed in Debian-based systems using a package manager like apt (the package is called gcc-arm-linux-gnueabi). On Ubuntu the arm-none-linux-gnueabi is included in ubertooth-firmware-source , We also need to prepare the environment by installing the necessary tools such as gcc python and git make. So we execute this command'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update\nsudo apt install cmake make gcc ubertooth-firmware-source python3 git \n")),(0,n.kt)("h3",{id:"second-switching-workspaces-cloning-source-code"},"Second: Switching workspaces Cloning source code"),(0,n.kt)("p",null,"Clone the source code and download the code for the necessary sub-modules"),(0,n.kt)("p",null,"Execute the following statements in sequence"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~\ngit clone https://github.com/micropython/micropython\ncd ~/micropython\ngit submodule update --init --recursive\n")),(0,n.kt)("p",null,"The information we will download is in this file, which contains the path to the download and the address of the code repository"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cat ~/micropython/.gitmodules \n")),(0,n.kt)("h3",{id:"third-build-the-mpy-cross---micropython-cross-compiler"},"Third: Build the mpy-cross  , MicroPython cross-compiler"),(0,n.kt)("p",null,"Most ports require the MicroPython cross-compiler to be built first. This program, called mpy-cross, is used to pre-compile Python scripts to .mpy files which can then be included (frozen) into the firmware/executable for a port. To build mpy-cross use:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/micropython/mpy-cross\nmake\n")),(0,n.kt)("h3",{id:"next--build-external-dependencies"},"Next : Build external dependencies"),(0,n.kt)("p",null,"We use the ",(0,n.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Seeeduino-XIAO-Arduino-Microcontroller-SAMD21-Cortex-M0+-p-4426.html"},"Seeeduino XIAO SAMD")," already supports micropython development.. It is a controller based on the arm architecture samd chip.\nSo we specify the version number and go to the corresponding directory and compile:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/micropython/ports/samd\nBOARD=SEEED_XIAO make V=1\n")),(0,n.kt)("h3",{id:"finally-burning-firmware"},"Finally :Burning firmware"),(0,n.kt)("p",null,"we can see the generated firmware here, we copy the firmware to the device and the micro python is available on the XIAO SAMD"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"ls ~/micropython/ports/samd/build-SEEED_XIAO/ |grep firmware.uf2\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo cp ~/micropython/ports/samd/build-SEEED_XIAO/firmware.uf2 /media/$USER/Arduino/\n")),(0,n.kt)("h2",{id:"test-our-firmware"},"Test our firmware"),(0,n.kt)("p",null,"Copy the code below and you will see the blue led flashing"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Python3"},"from machine import Pin, Timer\n\nled = Pin(19, Pin.OUT)\nCounter = 0    \ndef fun(tim):\n    global Counter\n    Counter = Counter + 1\n    state  =  Counter%2\n    led.value(state)\n \ntim = Timer(-1)\ntim.init(period=1000, mode=Timer.PERIODIC, callback=fun)\n")),(0,n.kt)("p",{style:{textAlign:"center"}},(0,n.kt)("img",{src:"https://files.seeedstudio.com/wiki/XIAO_SAMD/img/XIAO_SAMD_MICROPYTHON_LED.gif",border:"0"})),(0,n.kt)("p",null,"As you can see ",(0,n.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Seeeduino-XIAO-Arduino-Microcontroller-SAMD21-Cortex-M0+-p-4426.html"},"Seeeduino XIAO SAMD")," already supports micropython development."),(0,n.kt)("p",null,"You can also refer to this process to compile micropython firmware for other devices."),(0,n.kt)("h2",{id:"tech-support--product-discussion"},"Tech Support & Product Discussion"),(0,n.kt)("p",null,"Thank you for choosing our products! We are here to provide you with different support to ensure that your experience with our products is as smooth as possible. We offer several communication channels to cater to different preferences and needs."),(0,n.kt)("div",{class:"button_tech_support_container"},(0,n.kt)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,n.kt)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,n.kt)("div",{class:"button_tech_support_container"},(0,n.kt)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,n.kt)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}u.isMDXComponent=!0}}]);